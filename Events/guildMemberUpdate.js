const { EmbedBuilder, ChannelType } = require('discord.js');

// Import your boost handler module
const boostHandler = require('../Utils/serverboost.js');

module.exports = {
  name: 'guildMemberUpdate',
  async execute(oldMember, newMember, client) {
    // First, handle boost events
    await boostHandler.handleBoostUpdate(oldMember, newMember);
    
    // Then, handle other member update events (e.g., nickname/username changes)
    
    // Get or create a channel named 'misc-logs'
    let logChannel = newMember.guild.channels.cache.find(
      channel => channel.name === 'misc-logs' && channel.type === ChannelType.GuildText
    );

    if (!logChannel) {
      try {
        logChannel = await newMember.guild.channels.create({
          name: 'misc-logs',
          type: ChannelType.GuildText,
          topic: 'Logs generated by the bot',
          reason: 'Auto-created misc-logs channel for logging member update events'
        });
        console.log('misc-logs channel not found. Created new misc-logs channel.');
      } catch (error) {
        console.error('Failed to create misc-logs channel:', error);
        return;
      }
    }

    // Check if the server nickname has changed
    if (oldMember.nickname !== newMember.nickname) {
      const serverNicknameChangeEmbed = new EmbedBuilder()
        .setTitle('Server Nickname Changed')
        .setColor('#00ff00')
        .setDescription(`<@${newMember.id}> updated their server nickname.`)
        .addFields(
          { name: 'Old Nickname', value: oldMember.nickname || 'None', inline: true },
          { name: 'New Nickname', value: newMember.nickname || 'None', inline: true }
        )
        .setThumbnail(newMember.user.displayAvatarURL({ dynamic: true }))
        .setFooter({ text: 'Server Nickname Changed' })
        .setTimestamp();

      try {
        await logChannel.send({ embeds: [serverNicknameChangeEmbed] });
      } catch (error) {
        console.error('Error sending server nickname change log:', error);
      }
    }

    // Check if the username has changed
    if (oldMember.user.username !== newMember.user.username) {
      const usernameChangeEmbed = new EmbedBuilder()
        .setTitle('Username Changed')
        .setColor('#ffcc00')
        .setDescription(`<@${newMember.id}> changed their username.`)
        .addFields(
          { name: 'Old Username', value: oldMember.user.username, inline: true },
          { name: 'New Username', value: newMember.user.username, inline: true }
        )
        .setThumbnail(newMember.user.displayAvatarURL({ dynamic: true }))
        .setFooter({ text: 'Username Changed' })
        .setTimestamp();

      try {
        await logChannel.send({ embeds: [usernameChangeEmbed] });
      } catch (error) {
        console.error('Error sending username change log:', error);
      }
    }
  },
};
